from fastapi import FastAPI
from pydantic import BaseModel
from openai import OpenAI
import os
import logging
from typing import Dict, Any, Optional

# Import c√°c module m·ªõi
from database_service import DatabaseService
from query_parser import QueryParser, QueryIntent
from sql_query_builder import SQLQueryBuilder

app = FastAPI()

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ D√πng OpenRouter endpoint
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY")
)

# Kh·ªüi t·∫°o c√°c service
db_service = DatabaseService()
query_parser = QueryParser()
sql_builder = SQLQueryBuilder(db_service)

class ChatRequest(BaseModel):
    question: str

class ChatAIService:
    """
    Service ch√≠nh x·ª≠ l√Ω chat AI v·ªõi kh·∫£ nƒÉng truy v·∫•n database
    """
    
    def __init__(self):
        self.db_service = db_service
        self.query_parser = query_parser
        self.sql_builder = sql_builder
    
    def process_question(self, question: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
        """
        try:
            # Parse c√¢u h·ªèi
            parsed_query = self.query_parser.parse_query(question)
            
            # Ki·ªÉm tra c√≥ c·∫ßn truy v·∫•n database kh√¥ng
            if self.query_parser.should_use_database(parsed_query):
                return self._handle_database_query(question, parsed_query)
            else:
                return self._handle_general_chat(question)
        
        except Exception as e:
            logger.error(f"Error processing question: {e}")
            return {
                "answer": "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.",
                "error": str(e)
            }
    
    def _handle_database_query(self, question: str, parsed_query: Dict[str, Any]) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω c√¢u h·ªèi li√™n quan ƒë·∫øn database
        """
        try:
            # Th·ª±c thi query
            db_results = self.sql_builder.execute_parsed_query(parsed_query)
            
            # Format k·∫øt qu·∫£
            formatted_results = self.sql_builder.format_results_for_ai(db_results)
            
            # T·∫°o prompt cho AI
            context = self._create_database_context(formatted_results, parsed_query)
            prompt = (
                f"Ng∆∞·ªùi d√πng h·ªèi: {question}\n"
                f"D·ªØ li·ªáu t·ª´ database:\n{formatted_results}\n\n"
                f"H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n d·ªØ li·ªáu tr√™n. "
                f"Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† d·ªÖ hi·ªÉu. "
                f"N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p, h√£y th√¥ng b√°o v√† ƒë∆∞a ra g·ª£i √Ω."
            )
            
            # G·ªçi AI
            ai_response = self._call_ai_with_context(prompt)
            
            # L·∫•y g·ª£i √Ω c√¢u h·ªèi
            suggestions = self.sql_builder.get_query_suggestions(parsed_query)
            
            return {
                "answer": ai_response,
                "data_source": "database",
                "query_info": {
                    "intent": parsed_query['intent'].value,
                    "query_types": [qt.value for qt in parsed_query['query_types']],
                    "filters_applied": parsed_query['filters']
                },
                "suggestions": suggestions,
                "raw_data": db_results if db_results else None
            }
            
        except Exception as e:
            logger.error(f"Error handling database query: {e}")
            return self._handle_general_chat(question)
    
    def _handle_general_chat(self, question: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω c√¢u h·ªèi chat th√¥ng th∆∞·ªùng
        """
        try:
            prompt = (
                f"Ng∆∞·ªùi d√πng h·ªèi: {question}\n"
                f"H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát n·∫øu kh√¥ng c√≥ y√™u c·∫ßu ng√¥n ng·ªØ c·ª• th·ªÉ. "
                f"B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi h·ªçc l·∫≠p tr√¨nh."
            )
            
            ai_response = self._call_ai_with_context(prompt)
            
            return {
                "answer": ai_response,
                "data_source": "ai_general",
                "suggestions": [
                    "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ kh√≥a h·ªçc, b√†i t·∫≠p, t√†i li·ªáu ho·∫∑c cu·ªôc thi",
                    "V√≠ d·ª•: 'C√≥ kh√≥a h·ªçc Python n√†o kh√¥ng?'",
                    "Ho·∫∑c: 'B√†i t·∫≠p d·ªÖ v·ªÅ thu·∫≠t to√°n c√≥ g√¨?'"
                ]
            }
            
        except Exception as e:
            logger.error(f"Error handling general chat: {e}")
            return {
                "answer": "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.",
                "error": str(e)
            }
    
    def _create_database_context(self, formatted_results: str, parsed_query: Dict[str, Any]) -> str:
        """
        T·∫°o context cho AI d·ª±a tr√™n k·∫øt qu·∫£ database
        """
        context_parts = ["D·ªØ li·ªáu t·ª´ h·ªá th·ªëng:"]
        
        if formatted_results and formatted_results != "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.":
            context_parts.append(formatted_results)
        else:
            context_parts.append("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p.")
        
        return "\n".join(context_parts)
    
    def _call_ai_with_context(self, prompt: str) -> str:
        """
        G·ªçi AI v·ªõi context ƒë√£ chu·∫©n b·ªã
        """
        try:
            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system", 
                        "content": (
                            "B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi h·ªçc l·∫≠p tr√¨nh, n√≥i ti·∫øng Vi·ªát. "
                            "B·∫°n c√≥ th·ªÉ truy c·∫≠p th√¥ng tin v·ªÅ kh√≥a h·ªçc, b√†i t·∫≠p, t√†i li·ªáu v√† cu·ªôc thi. "
                            "H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, chi ti·∫øt v√† h·ªØu √≠ch. "
                            "N·∫øu c√≥ d·ªØ li·ªáu c·ª• th·ªÉ, h√£y t·∫≠n d·ª•ng ƒë·ªÉ ƒë∆∞a ra l·ªùi khuy√™n ph√π h·ª£p."
                        )
                    },
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1000
            )
            
            return completion.choices[0].message.content
            
        except Exception as e:
            logger.error(f"Error calling AI: {e}")
            return "Xin l·ªói, t√¥i g·∫∑p l·ªói khi t·∫°o ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i."

# Kh·ªüi t·∫°o service
chat_ai_service = ChatAIService()

@app.post("/ask")
async def ask(request: ChatRequest):
    """
    API endpoint ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi chat
    """
    try:
        question = request.question.strip()
        
        if not question:
            return {
                "answer": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ kh√≥a h·ªçc, b√†i t·∫≠p, t√†i li·ªáu v√† cu·ªôc thi. B·∫°n mu·ªën h·ªèi g√¨?",
                "suggestions": [
                    "C√≥ nh·ªØng kh√≥a h·ªçc n√†o?",
                    "B√†i t·∫≠p d·ªÖ ƒë·ªÉ luy·ªán t·∫≠p?",
                    "T√†i li·ªáu h·ªçc l·∫≠p tr√¨nh c√≥ g√¨?"
                ]
            }
        
        # X·ª≠ l√Ω c√¢u h·ªèi th√¥ng qua ChatAI service
        result = chat_ai_service.process_question(question)
        
        return result
        
    except Exception as e:
        logger.error(f"Error in ask endpoint: {e}")
        return {
            "answer": "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
            "error": str(e)
        }

@app.get("/health")
async def health_check():
    """
    Health check endpoint
    """
    try:
        # Ki·ªÉm tra k·∫øt n·ªëi database
        stats = db_service.get_statistics()
        return {
            "status": "healthy",
            "database": "connected" if stats else "disconnected",
            "services": {
                "query_parser": "active",
                "sql_builder": "active",
                "ai_client": "active"
            }
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e)
        }

@app.get("/stats")
async def get_system_stats():
    """
    L·∫•y th·ªëng k√™ t·ªïng quan h·ªá th·ªëng
    """
    try:
        stats = db_service.get_statistics()
        return {
            "statistics": stats,
            "status": "success"
        }
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        return {
            "error": str(e),
            "status": "error"
        }

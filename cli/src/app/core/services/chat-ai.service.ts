import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError, map, timeout, retry } from 'rxjs/operators';
import { environment } from '../../../environments/environment';
import { ChatAIRequest, ChatAIResponse, ChatAIMessage, ChatAIHealthStatus, ChatAIStats } from '../models/ai.model';

@Injectable({
  providedIn: 'root'
})
export class ChatAIService {
  private readonly apiUrl = `${environment.apiUrl}/chat-ai`;
  private readonly requestTimeout = 30000; // 30 seconds

  // Chat messages state
  private messagesSubject = new BehaviorSubject<ChatAIMessage[]>([]);
  public messages$ = this.messagesSubject.asObservable();

  // Chat widget state
  private isOpenSubject = new BehaviorSubject<boolean>(false);
  public isOpen$ = this.isOpenSubject.asObservable();

  // Loading state
  private isLoadingSubject = new BehaviorSubject<boolean>(false);
  public isLoading$ = this.isLoadingSubject.asObservable();

  constructor(private http: HttpClient) {
    // Load initial welcome message
    this.initializeChat();
  }

  private initializeChat(): void {
    const welcomeMessage: ChatAIMessage = {
      id: this.generateMessageId(),
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ kh√≥a h·ªçc, b√†i t·∫≠p, t√†i li·ªáu v√† cu·ªôc thi. B·∫°n mu·ªën h·ªèi g√¨?',
      isUser: false,
      timestamp: new Date()
    };
    
    this.messagesSubject.next([welcomeMessage]);
  }

  // Chat widget controls
  openChat(): void {
    this.isOpenSubject.next(true);
  }

  closeChat(): void {
    this.isOpenSubject.next(false);
  }

  toggleChat(): void {
    this.isOpenSubject.next(!this.isOpenSubject.value);
  }

  // Message management
  private addMessage(message: ChatAIMessage): void {
    const currentMessages = this.messagesSubject.value;
    this.messagesSubject.next([...currentMessages, message]);
  }

  private addTypingIndicator(): string {
    const typingMessage: ChatAIMessage = {
      id: 'typing',
      text: 'ƒêang tr·∫£ l·ªùi...',
      isUser: false,
      timestamp: new Date(),
      isTyping: true
    };
    this.addMessage(typingMessage);
    return 'typing';
  }

  private removeTypingIndicator(): void {
    const currentMessages = this.messagesSubject.value.filter(m => m.id !== 'typing');
    this.messagesSubject.next(currentMessages);
  }

  private generateMessageId(): string {
    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // Main chat functionality
  askQuestion(question: string): Observable<ChatAIMessage> {
    if (!question.trim()) {
      return throwError('C√¢u h·ªèi kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng');
    }

    // Add user message
    const userMessage: ChatAIMessage = {
      id: this.generateMessageId(),
      text: question,
      isUser: true,
      timestamp: new Date()
    };
    this.addMessage(userMessage);

    // Add typing indicator
    this.addTypingIndicator();
    this.isLoadingSubject.next(true);

    const request: ChatAIRequest = { question: question.trim() };

    return this.http.post<ChatAIResponse>(`${this.apiUrl}/ask`, request).pipe(
      timeout(this.requestTimeout),
      retry(1),
      map(response => {
        this.removeTypingIndicator();
        this.isLoadingSubject.next(false);

        if (response.success && response.data) {
          const aiMessage: ChatAIMessage = {
            id: this.generateMessageId(),
            text: response.data.answer,
            isUser: false,
            timestamp: new Date()
          };
          this.addMessage(aiMessage);

          // Add suggestions if available
          if (response.data.suggestions && response.data.suggestions.length > 0) {
            const suggestionsText = `\n\nüí° G·ª£i √Ω c√¢u h·ªèi:\n${response.data.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}`;
            const suggestionMessage: ChatAIMessage = {
              id: this.generateMessageId(),
              text: suggestionsText,
              isUser: false,
              timestamp: new Date()
            };
            this.addMessage(suggestionMessage);
          }

          return aiMessage;
        } else {
          throw new Error(response.message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n');
        }
      }),
      catchError(error => {
        this.removeTypingIndicator();
        this.isLoadingSubject.next(false);
        return this.handleError(error);
      })
    );
  }

  // Quick actions
  askQuickQuestion(predefinedQuestion: string): void {
    this.askQuestion(predefinedQuestion).subscribe({
      next: () => {},
      error: (error) => {
        console.error('Quick question error:', error);
      }
    });
  }

  // Predefined quick questions
  getQuickQuestions(): string[] {
    return [
      'C√≥ nh·ªØng kh√≥a h·ªçc n√†o?',
      'B√†i t·∫≠p d·ªÖ ƒë·ªÉ luy·ªán t·∫≠p?',
      'T√†i li·ªáu h·ªçc l·∫≠p tr√¨nh c√≥ g√¨?',
      'Cu·ªôc thi n√†o ƒëang di·ªÖn ra?',
      'Th·ªëng k√™ h·ªá th·ªëng'
    ];
  }

  // Clear chat history
  clearChat(): void {
    this.initializeChat();
  }

  // Health check
  checkHealth(): Observable<ChatAIHealthStatus> {
    return this.http.get<ChatAIHealthStatus>(`${this.apiUrl}/health`).pipe(
      timeout(10000),
      catchError(this.handleError)
    );
  }

  // Get statistics
  getStats(): Observable<ChatAIStats> {
    return this.http.get<ChatAIStats>(`${this.apiUrl}/stats`).pipe(
      timeout(15000),
      catchError(this.handleError)
    );
  }

  // Error handling
  private handleError(error: HttpErrorResponse | any) {
    let errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';

    if (error instanceof HttpErrorResponse) {
      switch (error.status) {
        case 0:
          errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.';
          break;
        case 400:
          errorMessage = error.error?.message || 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá';
          break;
        case 408:
          errorMessage = 'Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.';
          break;
        case 503:
          errorMessage = 'D·ªãch v·ª• AI hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
          break;
        case 500:
          errorMessage = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
          break;
        default:
          errorMessage = error.error?.message || `L·ªói HTTP ${error.status}`;
      }
    } else if (error.name === 'TimeoutError') {
      errorMessage = 'Y√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.';
    } else if (typeof error === 'string') {
      errorMessage = error;
    }

    // Add error message to chat
    const errorChatMessage: ChatAIMessage = {
      id: this.generateMessageId(),
      text: `‚ùå L·ªói: ${errorMessage}`,
      isUser: false,
      timestamp: new Date()
    };
    this.addMessage(errorChatMessage);

    console.error('ChatAI Service Error:', error);
    return throwError(errorMessage);
  }

  // Utility methods
  exportChatHistory(): string {
    const messages = this.messagesSubject.value;
    let chatHistory = 'Chat History - ' + new Date().toISOString() + '\n\n';
    
    messages.forEach(message => {
      if (!message.isTyping) {
        const role = message.isUser ? 'B·∫°n' : 'AI';
        const time = message.timestamp.toLocaleString('vi-VN');
        chatHistory += `[${time}] ${role}: ${message.text}\n\n`;
      }
    });

    return chatHistory;
  }

  // Get current chat state
  getCurrentMessages(): ChatAIMessage[] {
    return this.messagesSubject.value;
  }

  isCurrentlyOpen(): boolean {
    return this.isOpenSubject.value;
  }

  isCurrentlyLoading(): boolean {
    return this.isLoadingSubject.value;
  }
}